{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/submit-metadata/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\ninterface SubmissionData {\n  labName: string;\n  institution: string;\n  city: string;\n  state: string;\n  country: string;\n  contactName: string;\n  contactEmail: string;\n  researchUse: string;\n  comments: string;\n}\n\n// --- HELPER FUNCTION TO PREVENT TSV CORRUPTION ---\n// This function sanitizes text to ensure it doesn't break the TSV format.\nconst sanitizeForTsv = (text: string | null | undefined): string => {\n  if (!text) return '';\n  // Replace tabs with spaces and remove newline characters\n  return text.replace(/\\t/g, ' ').replace(/[\\r\\n]/g, '');\n};\n\n\n// --- DYNAMIC GEOCODING FUNCTION ---\nasync function getCoordinates(city: string, state: string, country: string): Promise<{ lat: number; lng: number; matchLevel: 'city' | 'state' | 'country' } | null> {\n  const queries = [\n    `${city}, ${state}, ${country}`,\n    `${city}, ${country}`,\n    `${state}, ${country}`,\n    country\n  ].filter(q => q.trim() !== ',' && q.trim().length > 1);\n\n  for (const query of queries) {\n    try {\n      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&accept-language=en&limit=1`;\n      \n      const response = await fetch(url, {\n        headers: { \n          'User-Agent': 'Aspergillus Community Sequencing Project' \n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const result = data[0];\n          console.log(`Geocoding success for \"${query}\":`, result.display_name);\n          \n          // IMPROVEMENT: Use the 'type' field from Nominatim for more reliable match level.\n          let matchLevel: 'city' | 'state' | 'country' = 'country';\n          const type = result.type;\n          if (['city', 'town', 'village'].includes(type)) {\n            matchLevel = 'city';\n          } else if (['state', 'province', 'region'].includes(type)) {\n            matchLevel = 'state';\n          }\n\n          return {\n            lat: parseFloat(result.lat),\n            lng: parseFloat(result.lon),\n            matchLevel: matchLevel,\n          };\n        }\n      }\n    } catch (error) {\n      console.error(`Geocoding error for query \"${query}\":`, error);\n    }\n  }\n\n  console.log(`Geocoding FAILED for: City=\"${city}\", State=\"${state}\", Country=\"${country}\"`);\n  return null;\n}\n\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data: SubmissionData = await request.json();\n\n    const requiredFields = ['labName', 'institution', 'city', 'country', 'contactName', 'contactEmail', 'researchUse'];\n    for (const field of requiredFields) {\n      if (!data[field as keyof SubmissionData]) {\n        return NextResponse.json(\n          { error: `Missing required field: ${field}` },\n          { status: 400 }\n        );\n      }\n    }\n\n    const timestamp = new Date().toISOString();\n    const coordinates = await getCoordinates(data.city, data.state, data.country);\n\n    // BUG FIX: Use the sanitize function on all user-provided text fields for the TSV.\n    const tsvRow = [\n      timestamp,\n      sanitizeForTsv(data.labName),\n      sanitizeForTsv(data.institution),\n      sanitizeForTsv(data.city),\n      sanitizeForTsv(data.state),\n      sanitizeForTsv(data.country),\n      sanitizeForTsv(data.contactName),\n      sanitizeForTsv(data.contactEmail),\n      sanitizeForTsv(data.researchUse),\n      sanitizeForTsv(data.comments),\n      coordinates?.lat?.toString() || '',\n      coordinates?.lng?.toString() || '',\n      coordinates?.matchLevel || 'none'\n    ].join('\\t');\n\n    const dataDir = path.join(process.cwd(), 'data');\n    const tsvFilePath = path.join(dataDir, 'lab_submissions.tsv');\n\n    await fs.mkdir(dataDir, { recursive: true });\n\n    try {\n      await fs.access(tsvFilePath);\n    } catch {\n      const headers = [\n        'timestamp', 'lab_name', 'institution', 'city', 'state', 'country',\n        'contact_name', 'contact_email', 'research_use', 'comments',\n        'latitude', 'longitude', 'match_level'\n      ].join('\\t');\n      await fs.writeFile(tsvFilePath, headers + '\\n');\n    }\n\n    await fs.appendFile(tsvFilePath, tsvRow + '\\n');\n\n    let successMessage = 'Metadata submitted successfully';\n\n    if (coordinates) {\n      const jsonFilePath = path.join(dataDir, 'labs.json');\n      let labs = [];\n      try {\n        const jsonData = await fs.readFile(jsonFilePath, 'utf-8');\n        labs = JSON.parse(jsonData);\n      } catch {}\n\n      const newLab = {\n        id: `lab_${Date.now()}`,\n        name: data.labName,\n        institution: data.institution,\n        location: `${data.city}${data.state ? ', ' + data.state : ''}, ${data.country}`,\n        country: data.country,\n        lat: coordinates.lat,\n        lng: coordinates.lng,\n      };\n      labs.push(newLab);\n\n      await fs.writeFile(jsonFilePath, JSON.stringify(labs, null, 2));\n      successMessage += ` Your laboratory will now appear on our global map (matched at ${coordinates.matchLevel} level).`;\n    } else {\n      successMessage += '. Note: Your location could not be automatically mapped and will be reviewed manually.';\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: successMessage,\n    });\n\n  } catch (error) {\n    console.error('Error processing submission:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}