{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/admin/contact-log/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n// IMPORT THE DATABASE DRIVER\nimport { neon } from '@neondatabase/serverless';\n\n// This interface matches the frontend component (camelCase)\nexport interface ContactLogEntry {\n  id: number;\n  labName: string;\n  institution: string;\n  email: string;\n  status: string;\n  contactedBy: string;\n  comments: string;\n}\n\n// Helper to convert database results (snake_case) to our frontend format (camelCase)\nconst dbToFrontend = (dbRow: Record<string, unknown>): ContactLogEntry => ({\n  id: dbRow.id as number,\n  labName: dbRow.lab_name as string,\n  institution: dbRow.institution as string,\n  email: dbRow.email as string,\n  status: dbRow.status as string,\n  contactedBy: dbRow.contacted_by as string,\n  comments: dbRow.comments as string,\n});\n\n// --- API Methods ---\n\n// GET: Fetches all contact log entries\nexport async function GET() {\n  try {\n    const sql = neon(process.env.POSTGRES_URL!);\n    const dbResult = await sql`SELECT * FROM contact_log ORDER BY id`;\n    const contacts = dbResult.map(dbToFrontend); // Convert to camelCase\n    return NextResponse.json({ contacts });\n  } catch (error) {\n    console.error(\"Database GET Error (contact-log):\", error);\n    return NextResponse.json({ error: \"Failed to fetch contact log.\" }, { status: 500 });\n  }\n}\n\n// POST: Creates a new, blank contact log entry\nexport async function POST() {\n  try {\n    const sql = neon(process.env.POSTGRES_URL!);\n    const newDbEntry = await sql`\n      INSERT INTO contact_log (lab_name, institution, email, status, contacted_by, comments) \n      VALUES ('', '', '', 'Not contacted', '', '') \n      RETURNING *;\n    `;\n    const newEntry = dbToFrontend(newDbEntry[0]); // Convert to camelCase\n    return NextResponse.json({ success: true, newEntry });\n  } catch (error) {\n    console.error(\"Database POST Error (contact-log):\", error);\n    return NextResponse.json({ error: \"Failed to create contact log entry.\" }, { status: 500 });\n  }\n}\n\n// PUT: Updates an existing contact log entry\nexport async function PUT(request: NextRequest) {\n  try {\n    const updatedEntry: ContactLogEntry = await request.json();\n    const sql = neon(process.env.POSTGRES_URL!);\n\n    await sql`\n      UPDATE contact_log\n      SET\n        lab_name = ${updatedEntry.labName},\n        institution = ${updatedEntry.institution},\n        email = ${updatedEntry.email},\n        status = ${updatedEntry.status},\n        contacted_by = ${updatedEntry.contactedBy},\n        comments = ${updatedEntry.comments}\n      WHERE id = ${updatedEntry.id};\n    `;\n    return NextResponse.json({ success: true, updatedEntry });\n  } catch (error) {\n    console.error(\"Database PUT Error (contact-log):\", error);\n    return NextResponse.json({ error: \"Failed to update contact log entry.\" }, { status: 500 });\n  }\n}\n\n// DELETE: Removes a contact log entry\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { id } = await request.json();\n    const sql = neon(process.env.POSTGRES_URL!);\n    await sql`DELETE FROM contact_log WHERE id = ${id}`;\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Database DELETE Error (contact-log):\", error);\n    return NextResponse.json({ error: \"Failed to delete contact log entry.\" }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA,6BAA6B;AAC7B;;;AAaA,qFAAqF;AACrF,MAAM,eAAe,CAAC,QAAoD,CAAC;QACzE,IAAI,MAAM,EAAE;QACZ,SAAS,MAAM,QAAQ;QACvB,aAAa,MAAM,WAAW;QAC9B,OAAO,MAAM,KAAK;QAClB,QAAQ,MAAM,MAAM;QACpB,aAAa,MAAM,YAAY;QAC/B,UAAU,MAAM,QAAQ;IAC1B,CAAC;AAKM,eAAe;IACpB,IAAI;QACF,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QACzC,MAAM,WAAW,MAAM,GAAG,CAAC,qCAAqC,CAAC;QACjE,MAAM,WAAW,SAAS,GAAG,CAAC,eAAe,uBAAuB;QACpE,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;QAAS;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QACzC,MAAM,aAAa,MAAM,GAAG,CAAC;;;;IAI7B,CAAC;QACD,MAAM,WAAW,aAAa,UAAU,CAAC,EAAE,GAAG,uBAAuB;QACrE,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAS;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;AACF;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,eAAgC,MAAM,QAAQ,IAAI;QACxD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QAEzC,MAAM,GAAG,CAAC;;;mBAGK,EAAE,aAAa,OAAO,CAAC;sBACpB,EAAE,aAAa,WAAW,CAAC;gBACjC,EAAE,aAAa,KAAK,CAAC;iBACpB,EAAE,aAAa,MAAM,CAAC;uBAChB,EAAE,aAAa,WAAW,CAAC;mBAC/B,EAAE,aAAa,QAAQ,CAAC;iBAC1B,EAAE,aAAa,EAAE,CAAC;IAC/B,CAAC;QACD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAa;IACzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;AACF;AAGO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,IAAI;QACjC,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QACzC,MAAM,GAAG,CAAC,mCAAmC,EAAE,GAAG,CAAC;QACnD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;AACF","debugId":null}}]
}