{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/admin/contact-log/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// Define the shape of a single contact log entry\nexport type ContactStatus = \"Not contacted\" | \"Contacted (x1)\" | \"Contacted (x2)\" | \"Responded (yes)\" | \"Responded (no)\";\nexport interface ContactLogEntry {\n  id: string;\n  labName: string;\n  institution: string;\n  email: string;\n  status: ContactStatus;\n  contactedBy: string;\n  comments: string;\n}\n\nconst dataDir = path.join(process.cwd(), 'data');\nconst jsonFilePath = path.join(dataDir, 'contact_log.json');\n\n// --- Helper Functions to Read/Write Data ---\nasync function readContacts(): Promise<ContactLogEntry[]> {\n  try {\n    await fs.access(jsonFilePath);\n    const fileContent = await fs.readFile(jsonFilePath, 'utf-8');\n    return JSON.parse(fileContent);\n  } catch {\n    // If the file doesn't exist, return an empty array. It will be created on the first POST/PUT.\n    return [];\n  }\n}\n\nasync function writeContacts(data: ContactLogEntry[]) {\n  await fs.mkdir(dataDir, { recursive: true });\n  await fs.writeFile(jsonFilePath, JSON.stringify(data, null, 2));\n}\n\n// --- API Methods ---\n\n// GET: Fetches all contact log entries\nexport async function GET() {\n  const contacts = await readContacts();\n  return NextResponse.json({ contacts });\n}\n\n// POST: Creates a new, blank contact log entry\nexport async function POST() {\n  const contacts = await readContacts();\n  const newEntry: ContactLogEntry = {\n    id: `contact_${Date.now()}`,\n    labName: '',\n    institution: '',\n    email: '',\n    status: 'Not contacted',\n    contactedBy: '',\n\tcomments: '',\n  };\n  contacts.push(newEntry);\n  await writeContacts(contacts);\n  return NextResponse.json({ success: true, newEntry });\n}\n\n// PUT: Updates an existing contact log entry\nexport async function PUT(request: NextRequest) {\n  const updatedEntry: ContactLogEntry = await request.json();\n  const contacts = await readContacts();\n  const index = contacts.findIndex(c => c.id === updatedEntry.id);\n\n  if (index === -1) {\n    return NextResponse.json({ error: 'Contact entry not found' }, { status: 404 });\n  }\n  \n  contacts[index] = updatedEntry;\n  await writeContacts(contacts);\n  return NextResponse.json({ success: true, updatedEntry });\n}\n\n// DELETE: Removes a contact log entry\nexport async function DELETE(request: NextRequest) {\n  const { id } = await request.json();\n  const contacts = await readContacts();\n  const filteredContacts = contacts.filter(c => c.id !== id);\n  \n  if (contacts.length === filteredContacts.length) {\n      return NextResponse.json({ error: 'Contact entry not found' }, { status: 404 });\n  }\n\n  await writeContacts(filteredContacts);\n  return NextResponse.json({ success: true });\n}"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;;;;AAcA,MAAM,UAAU,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACzC,MAAM,eAAe,4GAAI,CAAC,IAAI,CAAC,SAAS;AAExC,8CAA8C;AAC9C,eAAe;IACb,IAAI;QACF,MAAM,yGAAE,CAAC,MAAM,CAAC;QAChB,MAAM,cAAc,MAAM,yGAAE,CAAC,QAAQ,CAAC,cAAc;QACpD,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAM;QACN,8FAA8F;QAC9F,OAAO,EAAE;IACX;AACF;AAEA,eAAe,cAAc,IAAuB;IAClD,MAAM,yGAAE,CAAC,KAAK,CAAC,SAAS;QAAE,WAAW;IAAK;IAC1C,MAAM,yGAAE,CAAC,SAAS,CAAC,cAAc,KAAK,SAAS,CAAC,MAAM,MAAM;AAC9D;AAKO,eAAe;IACpB,MAAM,WAAW,MAAM;IACvB,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE;IAAS;AACtC;AAGO,eAAe;IACpB,MAAM,WAAW,MAAM;IACvB,MAAM,WAA4B;QAChC,IAAI,CAAC,QAAQ,EAAE,KAAK,GAAG,IAAI;QAC3B,SAAS;QACT,aAAa;QACb,OAAO;QACP,QAAQ;QACR,aAAa;QAChB,UAAU;IACT;IACA,SAAS,IAAI,CAAC;IACd,MAAM,cAAc;IACpB,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAM;IAAS;AACrD;AAGO,eAAe,IAAI,OAAoB;IAC5C,MAAM,eAAgC,MAAM,QAAQ,IAAI;IACxD,MAAM,WAAW,MAAM;IACvB,MAAM,QAAQ,SAAS,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,aAAa,EAAE;IAE9D,IAAI,UAAU,CAAC,GAAG;QAChB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;IAEA,QAAQ,CAAC,MAAM,GAAG;IAClB,MAAM,cAAc;IACpB,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAM;IAAa;AACzD;AAGO,eAAe,OAAO,OAAoB;IAC/C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,IAAI;IACjC,MAAM,WAAW,MAAM;IACvB,MAAM,mBAAmB,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAEvD,IAAI,SAAS,MAAM,KAAK,iBAAiB,MAAM,EAAE;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACjF;IAEA,MAAM,cAAc;IACpB,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAK;AAC3C","debugId":null}}]
}