{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/labs/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { neon } from '@neondatabase/serverless';\n\n// This is the shape of the data that the frontend map/list components expect.\ninterface Lab {\n  id: string;\n  name: string;\n  institution: string;\n  location: string;\n  country: string;\n  lat: number;\n  lng: number;\n}\n\n// Helper function to convert a database row (snake_case) to the frontend format (camelCase)\nfunction dbRowToLab(dbRow: Record<string, any>): Lab {\n  return {\n      id: dbRow.id.toString(),\n      name: dbRow.lab_name,\n      institution: dbRow.institution,\n      location: `${dbRow.city}${dbRow.state ? ', ' + dbRow.state : ''}, ${dbRow.country}`,\n      country: dbRow.country,\n      lat: parseFloat(dbRow.latitude),\n      lng: parseFloat(dbRow.longitude),\n  };\n}\n\n\nexport async function GET() {\n  try {\n    // 1. Connect to the database\n    const sql = neon(process.env.POSTGRES_URL!);\n\n    // 2. Fetch all lab submissions from the database\n    // We select only the columns needed for the public map to avoid sending extra data.\n    const dbResult = await sql`\n      SELECT id, lab_name, institution, city, state, country, latitude, longitude \n      FROM lab_submissions \n      WHERE latitude IS NOT NULL AND longitude IS NOT NULL;\n    `;\n\n    // 3. Transform the data into the format the frontend expects\n    const labs = dbResult.map(dbRowToLab);\n\n    return NextResponse.json({\n      success: true,\n      labs: labs,\n    });\n\n  } catch (error) {\n    console.error('Error fetching labs for map:', error);\n    return NextResponse.json(\n      { error: 'Internal server error while fetching map data.' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAaA,4FAA4F;AAC5F,SAAS,WAAW,KAA0B;IAC5C,OAAO;QACH,IAAI,MAAM,EAAE,CAAC,QAAQ;QACrB,MAAM,MAAM,QAAQ;QACpB,aAAa,MAAM,WAAW;QAC9B,UAAU,GAAG,MAAM,IAAI,GAAG,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,GAAG,EAAE,EAAE,MAAM,OAAO,EAAE;QACnF,SAAS,MAAM,OAAO;QACtB,KAAK,WAAW,MAAM,QAAQ;QAC9B,KAAK,WAAW,MAAM,SAAS;IACnC;AACF;AAGO,eAAe;IACpB,IAAI;QACF,6BAA6B;QAC7B,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QAEzC,iDAAiD;QACjD,oFAAoF;QACpF,MAAM,WAAW,MAAM,GAAG,CAAC;;;;IAI3B,CAAC;QAED,6DAA6D;QAC7D,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiD,GAC1D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}