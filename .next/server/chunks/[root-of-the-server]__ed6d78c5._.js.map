{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/admin/isolates/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n// IMPORT THE DATABASE DRIVER\nimport { neon } from '@neondatabase/serverless';\n\n// The interface for a row in our table. Note: 'id' is now a number.\ninterface IsolateData {\n  id: string;\n  timestamp: string;\n  [key: string]: any; // Allow other properties\n}\n\nfunction dbToFrontend(dbRow: Record<string, any>): Record<string, any> {\n  const newRow = { ...dbRow };\n  // Convert 'id' from a number to a string\n  newRow.id = dbRow.id.toString(); \n  // Convert 'timestamp' from a Date object to a standardized string\n  newRow.timestamp = new Date(dbRow.timestamp).toISOString();\n  return newRow;\n}\n\n// --- API Methods ---\n// GET: Fetches all isolate submissions and transforms them\nexport async function GET() {\n  try {\n    const sql = neon(process.env.POSTGRES_URL!);\n    const dbResult = await sql`SELECT * FROM isolate_submissions ORDER BY timestamp DESC`;\n    \n    // Use the helper to transform each row before sending it to the frontend.\n    const submissions = dbResult.map(dbToFrontend); \n\n    return NextResponse.json({ submissions });\n  } catch (error) {\n    console.error(\"Database GET Error (isolates):\", error);\n    return NextResponse.json({ error: \"Failed to fetch isolate data.\" }, { status: 500 });\n  }\n}\n\n// PUT: Updates an existing isolate submission\nexport async function PUT(request: NextRequest) {\n  try {\n    const updatedRow: IsolateData = await request.json();\n    const sql = neon(process.env.POSTGRES_URL!);\n\n    // The frontend sends snake_case keys, so no camelCase translation is needed here.\n    await sql`\n      UPDATE isolate_submissions\n      SET\n        submitting_lab = ${updatedRow.submitting_lab},\n        strain_name = ${updatedRow.strain_name},\n        strain_origin = ${updatedRow.strain_origin},\n        strain_center_name = ${updatedRow.strain_center_name},\n        strain_center_location = ${updatedRow.strain_center_location},\n        strain_center_date = ${updatedRow.strain_center_date},\n        sharing_lab_name = ${updatedRow.sharing_lab_name},\n        sharing_lab_institute = ${updatedRow.sharing_lab_institute},\n        sharing_lab_location = ${updatedRow.sharing_lab_location},\n        genotype_details_json = ${updatedRow.genotype_details_json},\n        other_genes_json = ${updatedRow.other_genes_json},\n        other_mutations = ${updatedRow.other_mutations}\n      WHERE id = ${parseInt(updatedRow.id, 10)}; -- Convert string id back to number for the query\n    `;\n\n    return NextResponse.json({ success: true, updatedRow });\n  } catch (error) {\n    console.error(\"Database PUT Error (isolates):\", error);\n    return NextResponse.json({ error: \"Failed to update isolate data.\" }, { status: 500 });\n  }\n}\n\n// DELETE: Removes an isolate submission\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { id } = await request.json();\n    const sql = neon(process.env.POSTGRES_URL!);\n    await sql`DELETE FROM isolate_submissions WHERE id = ${parseInt(id, 10)}`;\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Database DELETE Error (isolates):\", error);\n    return NextResponse.json({ error: \"Failed to delete isolate data.\" }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA,6BAA6B;AAC7B;;;AASA,SAAS,aAAa,KAA0B;IAC9C,MAAM,SAAS;QAAE,GAAG,KAAK;IAAC;IAC1B,yCAAyC;IACzC,OAAO,EAAE,GAAG,MAAM,EAAE,CAAC,QAAQ;IAC7B,kEAAkE;IAClE,OAAO,SAAS,GAAG,IAAI,KAAK,MAAM,SAAS,EAAE,WAAW;IACxD,OAAO;AACT;AAIO,eAAe;IACpB,IAAI;QACF,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QACzC,MAAM,WAAW,MAAM,GAAG,CAAC,yDAAyD,CAAC;QAErF,0EAA0E;QAC1E,MAAM,cAAc,SAAS,GAAG,CAAC;QAEjC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;QAAY;IACzC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,aAA0B,MAAM,QAAQ,IAAI;QAClD,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QAEzC,kFAAkF;QAClF,MAAM,GAAG,CAAC;;;yBAGW,EAAE,WAAW,cAAc,CAAC;sBAC/B,EAAE,WAAW,WAAW,CAAC;wBACvB,EAAE,WAAW,aAAa,CAAC;6BACtB,EAAE,WAAW,kBAAkB,CAAC;iCAC5B,EAAE,WAAW,sBAAsB,CAAC;6BACxC,EAAE,WAAW,kBAAkB,CAAC;2BAClC,EAAE,WAAW,gBAAgB,CAAC;gCACzB,EAAE,WAAW,qBAAqB,CAAC;+BACpC,EAAE,WAAW,oBAAoB,CAAC;gCACjC,EAAE,WAAW,qBAAqB,CAAC;2BACxC,EAAE,WAAW,gBAAgB,CAAC;0BAC/B,EAAE,WAAW,eAAe,CAAC;iBACtC,EAAE,SAAS,WAAW,EAAE,EAAE,IAAI;IAC3C,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAW;IACvD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF;AAGO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,IAAI;QACjC,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QACzC,MAAM,GAAG,CAAC,2CAA2C,EAAE,SAAS,IAAI,IAAI,CAAC;QACzE,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}