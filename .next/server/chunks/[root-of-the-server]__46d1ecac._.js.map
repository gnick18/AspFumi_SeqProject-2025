{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/admin/metadata/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { parse } from 'csv-parse/sync';\nimport { stringify } from 'csv-stringify/sync';\n\ninterface LabMetadata {\n  id: string;\n  [key: string]: string;\n}\n\nconst dataDir = path.join(process.cwd(), 'data');\nconst tsvFilePath = path.join(dataDir, 'lab_submissions.tsv');\nconst jsonFilePath = path.join(dataDir, 'labs.json');\nconst headers = [\n    'timestamp', 'lab_name', 'institution', 'city', 'state', 'country',\n    'contact_name', 'contact_email', 'research_use', 'comments',\n    'latitude', 'longitude', 'match_level'\n];\n\n// --- NEW: Function to create the initial data files with admin labs ---\nasync function seedInitialData() {\n  // Define your admin labs here.\n  // This data will be used to create the initial files.\n  const adminLabs = [\n    {\n      timestamp: new Date('2025-10-01T10:00:00.000Z').toISOString(),\n      lab_name: 'Keller Lab',\n      institution: 'University of Wisconsin-Madison',\n      city: 'Madison',\n      state: 'WI',\n      country: 'United States',\n      contact_name: 'Nancy Keller',\n      contact_email: 'npkeller@wisc.com',\n      research_use: 'Medical microbiology',\n      comments: 'This is a pre-seeded admin lab entry.',\n      latitude: '43.0731',\n      longitude: '-89.4012',\n      match_level: 'city'\n    },\n    {\n      timestamp: new Date('2025-10-01T10:01:00.000Z').toISOString(),\n      lab_name: 'Rokas Lab',\n      institution: 'Vanderbilt University',\n      city: 'Nashville',\n      state: 'TN',\n      country: 'United States',\n      contact_name: 'Antonis Rokas',\n      contact_email: 'admin@example.com',\n      research_use: 'Fungal evolution and pathogenesis.',\n      comments: 'This is a pre-seeded admin lab entry.',\n      latitude: '36.1627',\n      longitude: '-86.7816',\n      match_level: 'city'\n    },\n    {\n      timestamp: new Date('2025-10-01T10:02:00.000Z').toISOString(),\n      lab_name: 'Barber Lab',\n      institution: 'Friedrich Schiller University Jena',\n      city: 'Jena',\n      state: '',\n      country: 'Germany',\n      contact_name: 'Amelia Barber',\n      contact_email: 'amelia.barber@uni-jena.de',\n      research_use: 'Fungal genetics and pathogenesis.',\n      comments: 'This is a pre-seeded admin lab entry.',\n      latitude: '50.9271',\n      longitude: '11.5892',\n      match_level: 'city'\n    },\n    {\n      timestamp: new Date('2025-10-01T10:00:00.000Z').toISOString(),\n      lab_name: 'Gluck-Thaler Lab',\n      institution: 'University of Wisconsin-Madison',\n      city: 'Madison',\n      state: 'WI',\n      country: 'United States',\n      contact_name: 'Emile Gluck-Thaler',\n      contact_email: 'gluckthaler@wisc.edu',\n      research_use: 'Plant pathology fungal genomics',\n      comments: 'This is a pre-seeded admin lab entry.',\n      latitude: '43.0731',\n      longitude: '-89.4012',\n      match_level: 'city'\n    }\n  ];\n\n  // 1. Create and write the TSV file\n  const tsvString = stringify(adminLabs, { header: true, columns: headers, delimiter: '\\t' });\n  await fs.mkdir(dataDir, { recursive: true });\n  await fs.writeFile(tsvFilePath, tsvString);\n\n  // 2. Create and write the JSON file for the map\n  const jsonData = adminLabs.map((lab, index) => ({\n      id: lab.timestamp || `seeded-${index}`, // Use timestamp as a unique ID\n      name: lab.lab_name,\n      institution: lab.institution,\n      location: `${lab.city}${lab.state ? ', ' + lab.state : ''}, ${lab.country}`,\n      country: lab.country,\n      lat: parseFloat(lab.latitude),\n      lng: parseFloat(lab.longitude),\n      matchLevel: lab.match_level\n  }));\n  await fs.writeFile(jsonFilePath, JSON.stringify(jsonData, null, 2));\n  console.log('Successfully seeded initial lab data.');\n}\n\n\nasync function readTsv(): Promise<LabMetadata[]> {\n  try {\n    const fileContent = await fs.readFile(tsvFilePath, 'utf-8');\n    const records = parse(fileContent, {\n      delimiter: '\\t',\n      columns: true,\n      skip_empty_lines: true,\n    });\n    return records.map((rec: any) => ({ id: rec.timestamp, ...rec }));\n  } catch {\n    return [];\n  }\n}\n\nasync function writeData(data: LabMetadata[]) {\n    if (data.length > 0) {\n        const dataToWrite = data.map(({ id, ...rest }) => rest);\n        const tsvString = stringify(dataToWrite, { header: true, delimiter: '\\t', columns: headers });\n        await fs.writeFile(tsvFilePath, tsvString);\n    } else {\n        await fs.unlink(tsvFilePath).catch(() => {});\n    }\n\n    const jsonData = data.map(({ id, lab_name, institution, city, state, country, latitude, longitude, match_level }) => ({\n        id,\n        name: lab_name,\n        institution,\n        location: `${city}${state ? ', ' + state : ''}, ${country}`,\n        country,\n        lat: parseFloat(latitude),\n        lng: parseFloat(longitude),\n        matchLevel: match_level\n    }));\n    await fs.writeFile(jsonFilePath, JSON.stringify(jsonData, null, 2));\n}\n\n// --- API Methods ---\n\nexport async function GET() {\n  try {\n    // Check if the file exists. If it throws an error, the file is not there.\n    await fs.access(tsvFilePath);\n  } catch {\n    // File doesn't exist, so let's create it with the default admin labs.\n    console.log('Data file not found. Seeding initial admin labs...');\n    await seedInitialData();\n  }\n  \n  // Now, read the file (which is guaranteed to exist) and return its content.\n  const submissions = await readTsv();\n  return NextResponse.json({ submissions });\n}\n\nexport async function PUT(request: NextRequest) {\n  const updatedRow: LabMetadata = await request.json();\n  let submissions = await readTsv();\n  const index = submissions.findIndex(s => s.id === updatedRow.id);\n\n  if (index === -1) {\n    return NextResponse.json({ error: 'Submission not found' }, { status: 404 });\n  }\n  \n  submissions[index] = { ...submissions[index], ...updatedRow };\n  await writeData(submissions);\n\n  return NextResponse.json({ success: true, updatedRow });\n}\n\nexport async function DELETE(request: NextRequest) {\n  const { id } = await request.json();\n  let submissions = await readTsv();\n  const filteredSubmissions = submissions.filter(s => s.id !== id);\n  \n  if (submissions.length === filteredSubmissions.length) {\n      return NextResponse.json({ error: 'Submission not found' }, { status: 404 });\n  }\n\n  await writeData(filteredSubmissions);\n\n  return NextResponse.json({ success: true });\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}