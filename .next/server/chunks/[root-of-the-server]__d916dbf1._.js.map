{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/submit-metadata/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n// IMPORT THE DATABASE DRIVER\nimport { neon } from '@neondatabase/serverless';\n\n// This interface defines the data we expect from the form\ninterface SubmissionData {\n  labName: string;\n  institution: string;\n  city: string;\n  state: string;\n  country: string;\n  contactName: string;\n  contactEmail: string;\n  researchUse: string;\n  comments: string;\n}\n\n// Geocoding function remains the same as it's still needed\nasync function getCoordinates(city: string, state: string, country: string): Promise<{ lat: number; lng: number; matchLevel: string } | null> {\n    const queries = [`${city}, ${state}, ${country}`, `${city}, ${country}`, `${state}, ${country}`, country].filter(q => q.trim() !== ',' && q.trim().length > 1);\n    for (const query of queries) {\n        try {\n            const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&accept-language=en&limit=1`;\n            const response = await fetch(url, { headers: { 'User-Agent': 'Aspergillus Community Sequencing Project' } });\n            if (response.ok) {\n                const data = await response.json();\n                if (data && data.length > 0) {\n                    const result = data[0];\n                    let matchLevel = 'country';\n                    if (['city', 'town', 'village'].includes(result.type)) {\n                      matchLevel = 'city';\n                    } else if (['state', 'province', 'region'].includes(result.type)) {\n                      matchLevel = 'state';\n                    }\n                    return { lat: parseFloat(result.lat), lng: parseFloat(result.lon), matchLevel };\n                }\n            }\n        } catch (error) { console.error(`Geocoding error for query \"${query}\":`, error); }\n    }\n    return null;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data: SubmissionData = await request.json();\n\n    // 2. CONNECT TO THE DATABASE\n    // The connection string is automatically and securely read from the .env.local file\n    // that Vercel created for you. You don't need to change this line.\n    const sql = neon(process.env.POSTGRES_URL!);\n\n    // Get coordinates for the location\n    const coordinates = await getCoordinates(data.city, data.state, data.country);\n\n    // 3. INSERT DATA INTO THE DATABASE\n    // This replaces all the old 'fs.writeFile' logic.\n    // It's a parameterized query, which is a secure way to prevent SQL injection attacks.\n    await sql`\n      INSERT INTO lab_submissions (\n        lab_name, institution, city, state, country, \n        contact_name, contact_email, research_use, comments, \n        latitude, longitude, match_level\n      ) VALUES (\n        ${data.labName}, ${data.institution}, ${data.city}, ${data.state}, ${data.country},\n        ${data.contactName}, ${data.contactEmail}, ${data.researchUse}, ${data.comments},\n        ${coordinates?.lat || null}, ${coordinates?.lng || null}, ${coordinates?.matchLevel || 'none'}\n      );\n    `;\n\n    let successMessage = 'Metadata submitted successfully';\n    if (coordinates) {\n        successMessage += ` Your laboratory will appear on our global map shortly (matched at ${coordinates.matchLevel} level).`;\n    } else {\n        successMessage += '. Note: Your location could not be automatically mapped and will be reviewed manually.';\n    }\n\n    return NextResponse.json({ success: true, message: successMessage });\n\n  } catch (error) {\n    console.error('Error processing submission:', error);\n    // Provide a generic error message to the user for security\n    return NextResponse.json({ error: 'Internal server error while processing submission.' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA,6BAA6B;AAC7B;;;AAeA,2DAA2D;AAC3D,eAAe,eAAe,IAAY,EAAE,KAAa,EAAE,OAAe;IACtE,MAAM,UAAU;QAAC,GAAG,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS;QAAE,GAAG,KAAK,EAAE,EAAE,SAAS;QAAE,GAAG,MAAM,EAAE,EAAE,SAAS;QAAE;KAAQ,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,OAAO,OAAO,EAAE,IAAI,GAAG,MAAM,GAAG;IAC5J,KAAK,MAAM,SAAS,QAAS;QACzB,IAAI;YACA,MAAM,MAAM,CAAC,yDAAyD,EAAE,mBAAmB,OAAO,2BAA2B,CAAC;YAC9H,MAAM,WAAW,MAAM,MAAM,KAAK;gBAAE,SAAS;oBAAE,cAAc;gBAA2C;YAAE;YAC1G,IAAI,SAAS,EAAE,EAAE;gBACb,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,IAAI,QAAQ,KAAK,MAAM,GAAG,GAAG;oBACzB,MAAM,SAAS,IAAI,CAAC,EAAE;oBACtB,IAAI,aAAa;oBACjB,IAAI;wBAAC;wBAAQ;wBAAQ;qBAAU,CAAC,QAAQ,CAAC,OAAO,IAAI,GAAG;wBACrD,aAAa;oBACf,OAAO,IAAI;wBAAC;wBAAS;wBAAY;qBAAS,CAAC,QAAQ,CAAC,OAAO,IAAI,GAAG;wBAChE,aAAa;oBACf;oBACA,OAAO;wBAAE,KAAK,WAAW,OAAO,GAAG;wBAAG,KAAK,WAAW,OAAO,GAAG;wBAAG;oBAAW;gBAClF;YACJ;QACJ,EAAE,OAAO,OAAO;YAAE,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,MAAM,EAAE,CAAC,EAAE;QAAQ;IACrF;IACA,OAAO;AACX;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAuB,MAAM,QAAQ,IAAI;QAE/C,6BAA6B;QAC7B,oFAAoF;QACpF,mEAAmE;QACnE,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QAEzC,mCAAmC;QACnC,MAAM,cAAc,MAAM,eAAe,KAAK,IAAI,EAAE,KAAK,KAAK,EAAE,KAAK,OAAO;QAE5E,mCAAmC;QACnC,kDAAkD;QAClD,sFAAsF;QACtF,MAAM,GAAG,CAAC;;;;;;QAMN,EAAE,KAAK,OAAO,CAAC,EAAE,EAAE,KAAK,WAAW,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,OAAO,CAAC;QAClF,EAAE,KAAK,WAAW,CAAC,EAAE,EAAE,KAAK,YAAY,CAAC,EAAE,EAAE,KAAK,WAAW,CAAC,EAAE,EAAE,KAAK,QAAQ,CAAC;QAChF,EAAE,aAAa,OAAO,KAAK,EAAE,EAAE,aAAa,OAAO,KAAK,EAAE,EAAE,aAAa,cAAc,OAAO;;IAElG,CAAC;QAED,IAAI,iBAAiB;QACrB,IAAI,aAAa;YACb,kBAAkB,CAAC,mEAAmE,EAAE,YAAY,UAAU,CAAC,QAAQ,CAAC;QAC5H,OAAO;YACH,kBAAkB;QACtB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,SAAS;QAAe;IAEpE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,2DAA2D;QAC3D,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAqD,GAAG;YAAE,QAAQ;QAAI;IAC1G;AACF","debugId":null}}]
}