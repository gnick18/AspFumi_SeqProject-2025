{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/admin/metadata/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n// IMPORT THE DATABASE DRIVER\nimport { neon, NeonQueryFunction } from '@neondatabase/serverless';\n\n// The interface for a row in our table. Note: 'id' is now a number.\ninterface LabMetadata {\n  id: number;\n  [key: string]: unknown; \n}\n\n// --- NEW: Database-powered seeding function ---\n// This function will only run if the database table is empty.\nasync function seedInitialData(sql: NeonQueryFunction<false, false>) {\n  const adminLabs = [\n    { lab_name: 'Keller Lab', institution: 'University of Wisconsin-Madison', city: 'Madison', state: 'WI', country: 'United States', contact_name: 'Nancy Keller', contact_email: 'npkeller@wisc.com', research_use: 'Medical microbiology', comments: 'This is a pre-seeded admin lab entry.', latitude: 43.0731, longitude: -89.4012, match_level: 'city' },\n    { lab_name: 'Rokas Lab', institution: 'Vanderbilt University', city: 'Nashville', state: 'TN', country: 'United States', contact_name: 'Antonis Rokas', contact_email: 'admin@example.com', research_use: 'Fungal evolution and pathogenesis.', comments: 'This is a pre-seeded admin lab entry.', latitude: 36.1627, longitude: -86.7816, match_level: 'city' },\n    { lab_name: 'Barber Lab', institution: 'Friedrich Schiller University Jena', city: 'Jena', state: '', country: 'Germany', contact_name: 'Amelia Barber', contact_email: 'amelia.barber@uni-jena.de', research_use: 'Fungal genetics and pathogenesis.', comments: 'This is a pre-seeded admin lab entry.', latitude: 50.9271, longitude: 11.5892, match_level: 'city' },\n    { lab_name: 'Gluck-Thaler Lab', institution: 'University of Wisconsin-Madison', city: 'Madison', state: 'WI', country: 'United States', contact_name: 'Emile Gluck-Thaler', contact_email: 'gluckthaler@wisc.edu', research_use: 'Plant pathology fungal genomics', comments: 'This is a pre-seeded admin lab entry.', latitude: 43.0731, longitude: -89.4012, match_level: 'city' }\n  ];\n\n  // Insert each admin lab into the database table\n  for (const lab of adminLabs) {\n    await sql`\n      INSERT INTO lab_submissions (\n        lab_name, institution, city, state, country, contact_name, contact_email, \n        research_use, comments, latitude, longitude, match_level\n      ) VALUES (\n        ${lab.lab_name}, ${lab.institution}, ${lab.city}, ${lab.state}, ${lab.country}, \n        ${lab.contact_name}, ${lab.contact_email}, ${lab.research_use}, ${lab.comments},\n        ${lab.latitude}, ${lab.longitude}, ${lab.match_level}\n      );\n    `;\n  }\n}\n\n// --- API Methods ---\n\n// GET: Fetches all lab submissions from the database\nexport async function GET() {\n  const sql = neon(process.env.POSTGRES_URL!);\n  \n  try {\n    // Check if the table is empty\n    const countResult = await sql`SELECT COUNT(*) FROM lab_submissions`;\n    const rowCount = parseInt(countResult[0].count as string, 10);\n    \n    // If it's empty, seed it with the initial admin labs\n    if (rowCount === 0) {\n      await seedInitialData(sql);\n    }\n\n    // Fetch and return all submissions\n    const submissions = await sql`SELECT * FROM lab_submissions ORDER BY timestamp DESC`;\n    return NextResponse.json({ submissions });\n\n  } catch (error) {\n      console.error(\"Database GET Error:\", error);\n      return NextResponse.json({ error: \"Failed to fetch data from database.\" }, { status: 500 });\n  }\n}\n\n// PUT: Updates an existing lab submission in the database\nexport async function PUT(request: NextRequest) {\n  try {\n    const updatedRow: LabMetadata = await request.json();\n    const sql = neon(process.env.POSTGRES_URL!);\n    \n    await sql`\n      UPDATE lab_submissions\n      SET \n        lab_name = ${updatedRow.lab_name}, institution = ${updatedRow.institution}, city = ${updatedRow.city},\n        state = ${updatedRow.state}, country = ${updatedRow.country}, contact_name = ${updatedRow.contact_name},\n        contact_email = ${updatedRow.contact_email}, research_use = ${updatedRow.research_use},\n        comments = ${updatedRow.comments}, latitude = ${updatedRow.latitude}, longitude = ${updatedRow.longitude},\n        match_level = ${updatedRow.match_level}\n      WHERE id = ${updatedRow.id};\n    `;\n    return NextResponse.json({ success: true, updatedRow });\n  } catch(error) {\n    console.error(\"Database PUT Error:\", error);\n    return NextResponse.json({ error: \"Failed to update data in database.\" }, { status: 500 });\n  }\n}\n\n// DELETE: Removes a lab submission from the database\nexport async function DELETE(request: NextRequest) {\n    try {\n        const { id } = await request.json();\n        const sql = neon(process.env.POSTGRES_URL!);\n        await sql`DELETE FROM lab_submissions WHERE id = ${id}`;\n        return NextResponse.json({ success: true });\n    } catch(error) {\n        console.error(\"Database DELETE Error:\", error);\n        return NextResponse.json({ error: \"Failed to delete data from database.\" }, { status: 500 });\n    }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}