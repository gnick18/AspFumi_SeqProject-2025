{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gnickles/Desktop/AspFumi_Site/src/app/api/submit-isolate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n// IMPORT THE DATABASE DRIVER\nimport { neon } from '@neondatabase/serverless';\n\n// This interface should match the IsolateFormData from your frontend component\ninterface IsolateFormData {\n  submittingLab: string;\n  strainName: string;\n  genotype: object; // Keep as a generic object for serialization\n  otherGenes: object[]; // Keep as a generic array for serialization\n  otherMutations: string;\n  strainOrigin: string;\n  strainCenterName: string;\n  strainCenterLocation: string;\n  strainCenterDate: string;\n  sharingLabName: string;\n  sharingLabInstitute: string;\n  sharingLabLocation: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data: IsolateFormData = await request.json();\n\n    // Basic validation remains the same\n    if (!data.submittingLab || !data.strainName) {\n      return NextResponse.json(\n        { error: 'Missing required fields: Submitting Lab and Strain Name.' },\n        { status: 400 }\n      );\n    }\n\n    // 2. CONNECT TO THE DATABASE\n    const sql = neon(process.env.POSTGRES_URL!);\n\n    // As before, we convert the complex objects into JSON strings to store them.\n    const genotypeString = JSON.stringify(data.genotype);\n    const otherGenesString = JSON.stringify(data.otherGenes);\n    \n    // 3. INSERT DATA INTO THE DATABASE\n    // This replaces all the old file-writing logic.\n    await sql`\n      INSERT INTO isolate_submissions (\n        submitting_lab, strain_name, strain_origin,\n        strain_center_name, strain_center_location, strain_center_date,\n        sharing_lab_name, sharing_lab_institute, sharing_lab_location,\n        genotype_details_json, other_genes_json, other_mutations\n      ) VALUES (\n        ${data.submittingLab}, ${data.strainName}, ${data.strainOrigin},\n        ${data.strainCenterName || null}, ${data.strainCenterLocation || null}, ${data.strainCenterDate || null},\n        ${data.sharingLabName || null}, ${data.sharingLabInstitute || null}, ${data.sharingLabLocation || null},\n        ${genotypeString}, ${otherGenesString}, ${data.otherMutations || null}\n      );\n    `;\n\n    return NextResponse.json({\n      success: true,\n      message: 'Isolate information submitted successfully!',\n    });\n\n  } catch (error) {\n    console.error('Error processing isolate submission:', error);\n    return NextResponse.json(\n      { error: 'Internal server error while processing isolate submission.' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA,6BAA6B;AAC7B;;;AAkBO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAwB,MAAM,QAAQ,IAAI;QAEhD,oCAAoC;QACpC,IAAI,CAAC,KAAK,aAAa,IAAI,CAAC,KAAK,UAAU,EAAE;YAC3C,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2D,GACpE;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;QAEzC,6EAA6E;QAC7E,MAAM,iBAAiB,KAAK,SAAS,CAAC,KAAK,QAAQ;QACnD,MAAM,mBAAmB,KAAK,SAAS,CAAC,KAAK,UAAU;QAEvD,mCAAmC;QACnC,gDAAgD;QAChD,MAAM,GAAG,CAAC;;;;;;;QAON,EAAE,KAAK,aAAa,CAAC,EAAE,EAAE,KAAK,UAAU,CAAC,EAAE,EAAE,KAAK,YAAY,CAAC;QAC/D,EAAE,KAAK,gBAAgB,IAAI,KAAK,EAAE,EAAE,KAAK,oBAAoB,IAAI,KAAK,EAAE,EAAE,KAAK,gBAAgB,IAAI,KAAK;QACxG,EAAE,KAAK,cAAc,IAAI,KAAK,EAAE,EAAE,KAAK,mBAAmB,IAAI,KAAK,EAAE,EAAE,KAAK,kBAAkB,IAAI,KAAK;QACvG,EAAE,eAAe,EAAE,EAAE,iBAAiB,EAAE,EAAE,KAAK,cAAc,IAAI,KAAK;;IAE1E,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6D,GACtE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}